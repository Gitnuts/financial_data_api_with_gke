# Note: before using postgres, you need to add persistent volume in the VM you are using.
# e.g. for Google Compute VMs:
# gcloud compute disks create --size=10Gi --zone=europe-west1-b db-postgres-pd
#
# Also, to use this file, you need to specify these env variables:
# - POSTGRES_DB
# - POSTGRES_USER
# - POSTGRES_PASSWORD
# and specify the disc size you wish to allocate from VM


---
apiVersion: v1
# Kind for kubernets ConfigMap
kind: ConfigMap
metadata:
  # Name your ConfigMap
  name: db-secret-credentials
  labels:
    app: postgresdb
data:
  # User DB
  POSTGRES_DB: your_database_name
  # Db user
  POSTGRES_USER: your_username
  # Db password
  POSTGRES_PASSWORD: your_password
  # DB subdirectory
  PGDATA: /var/lib/postgres/data/pgdata
---
apiVersion: v1
# Kind for volume chain
kind: PersistentVolume
metadata:
  # Name the persistent chain
  name: postgresdb-persistent-volume
  # Labels for identifying PV
  labels:
    type: local
    app: postgresdb
spec:
  capacity:
    storage: 10Gi
  accessModes:
    - ReadWriteMany
  storageClassName: standard
  gcePersistentDisk:
    pdName: db-postgres-pd
    fsType: ext4
---
apiVersion: v1
# define a resource for volume chain
kind: PersistentVolumeClaim
metadata:
  # Name the volume chain
  name: db-persistent-volume-claim
spec:
  storageClassName: standard
  accessModes:
    # Allow ReadWrite to multiple pods
    - ReadWriteMany
  # PVC requesting resources
  resources:
    requests:
      # the PVC storage
      storage: 10Gi
---
# Kubernetes API version
apiVersion: apps/v1
# Deployment object
kind: Deployment
metadata:
  # The name of the Deployment
  name: postgresdb
spec:
  selector:
    # labels the pods
    matchLabels:
      app: postgresdb
  template:
    metadata:
      labels:
        # The label the pods created from the pod template should have
        app: postgresdb
    spec:
      containers:
        # The container name to execute pods
        - name: postgresdb
          # pull postgresimage from docker hub
          image: postgres
          ports:
            # Assign ports to expose container
            - containerPort: 5432
          envFrom:
            # Load the environment variables/PostgresSQL credentials
            - configMapRef:
                # This should be the ConfigMap name created ealier
                name: db-secret-credentials
          volumeMounts:
            # The volume mounts  for the container
            - mountPath: /var/lib/postgres/data
              name: db-data
      # Volumes attached to the pod
      volumes:
        - name: db-data
          persistentVolumeClaim:
            # reference the PersistentVolumeClaim
            claimName: db-persistent-volume-claim
---
apiVersion: v1
# Kind for service
kind: Service
metadata:
  # Name your service
  name: postgresdb
  labels:
    app: postgresdb
spec:
  # Choose how to expose your service
  ports:
    # The port number to expose the service
    - protocol: TCP
      port: 5432
      targetPort: 5432
  # Pod to route service traffic
  selector:
    app: postgresdb
